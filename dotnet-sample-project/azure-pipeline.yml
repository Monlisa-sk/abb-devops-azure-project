# Test Pipeline
trigger:
  branches:
    include:
      - main
      - feature/*

pool:
  name: AzureVM

variables:
  # CI vars
  SRC_DIR: 'dotnet-sample-project'
  dockerRegistryServiceConnection: 'devops-service-connection'
  imageRepository: 'dotnet-sample-project'
  tag: '$(Build.SourceBranchName)-$(Build.BuildId)'
  # CD vars
  azureSubscription: 'ARM-Service-Connection'
  aksResourceGroup: 'abb-devops'
  aksName: 'abb-aks-cluster'
  acrName: 'devopscontainerreg'
  namespace: 'dev'
  releaseName: 'myapp'
  chartPath: './helmchart'
  imageRepositoryCD: 'devopscontainerreg.azurecr.io/dotnet-sample-project'
  imageTag: 'ci-pipeline-45'

stages:
- stage: BuildAndTest
  displayName: 'Build & Test'
  jobs:
    - job: build_and_test
      displayName: 'Build and Test'
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '9.0.x'

        - script: dotnet restore '$(SRC_DIR)/source'
          displayName: 'Restore NuGet packages'

        - script: dotnet build '$(SRC_DIR)/source' --configuration Release --no-restore
          displayName: 'Build solution'

        - script: |
            echo "Discovering test projects in $(SRC_DIR)..."
            set -e
            TEST_PROJECTS=$(find "$(SRC_DIR)/tests" -type f -name "*Tests.csproj" -o -name "*.Tests.csproj" || true)
            if [ -z "$TEST_PROJECTS" ]; then
              echo "No test projects found."
              exit 0
            fi
            for proj in $TEST_PROJECTS; do
              echo "Running tests for $proj"
              dotnet test "$proj" --configuration Release --no-build --collect:"XPlat Code Coverage"  --logger trx
              echo "Completed tests for $proj"
            done
          displayName: 'Run all tests with coverage and logs'

- stage: CodeAnalysis
  displayName: 'SonarQube Build Scan'
  jobs:
  - job: sonarqube
    displayName: SonarQube
    continueOnError: true
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'
    - task: SonarQubePrepare@7
      inputs:
        SonarQube: 'sonarqube-project'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'sonarqube-project'
        cliProjectName: 'dotnet-sample-project'
        cliProjectVersion: '$(Build.BuildNumber)'
        extraProperties: |
          sonar.sources=$(SRC_DIR)/source
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/$(SRC_DIR)/**/coverage.opencover.xml
          sonar.exclusions=**/*.md

    - script: dotnet build '$(SRC_DIR)/source' 
      displayName: 'Build for analysis'

    - task: SonarQubeAnalyze@7

    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'

- stage: DockerBuild
  displayName: 'Docker Build'
  jobs:
  - job: docker_build
    displayName: 'Build image'
    steps:
    - task: Docker@2
      displayName: 'Build image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: 'dotnet-sample-project/Dockerfile'
        tags: '$(tag)'

- stage: Push
  displayName: 'Push image to ACR'
  jobs:
  - job: docker_push
    displayName: 'Push image'
    steps:
    - task: Docker@2
      displayName: 'Push image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

- stage: CD
  displayName: Deploy to AKS
  jobs:
  - job: Deploy
    displayName: Attach ACR & Helm deploy
    container: mcr.microsoft.com/azure-cli:2.62.0  
    steps:
    - script: az version
      displayName: Check az in container
      #Ensure AKS can pull from ACR (idempotent)
    - task: AzureCLI@2
      displayName: Attach ACR to AKS (idempotent)
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Checking AKSâ†”ACR link..."
          if az aks check-acr -g '$(aksResourceGroup)' -n '$(aksName)' --acr '$(acrName)' --query accessLevel -o tsv | grep -qi acrpull; then
            echo "Already attached."
          else
            echo "Attaching ACR to AKS..."
            az aks update -g '$(aksResourceGroup)' -n '$(aksName)' --attach-acr '$(acrName)'
          fi
          
    - task: AzureCLI@2
      displayName: Get AKS credentials
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          az aks get-credentials -g '$(aksResourceGroup)' -n '$(aksName)' --overwrite-existing
          kubectl get nodes

    - script: |
        kubectl get ns $(namespace) || kubectl create namespace $(namespace)
      displayName: Ensure namespace