# Test Pipeline
trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*

pool:
  name: AzureVM

variables:
  - group: Variables

stages:
- stage: BuildAndTest
  displayName: 'Build & Test'
  jobs:
    - job: build_and_test
      displayName: 'Build and Test'
      steps:
        - task: AzureKeyVault@2
          inputs:
            azureSubscription: 'Azure subscription 1 (6b4c6964-00b1-443b-b777-d2bfc4833a31)'
            KeyVaultName: 'dotnet-app-vault'
            SecretsFilter: '*'
            RunAsPreJob: true
        - script: |
            echo "The value of mySecret is: $(sonarlogin)"
          displayName: 'Use the secret'

        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '9.0.x'

        - script: dotnet restore '$(SRC_DIR)/source'
          displayName: 'Restore NuGet packages'

        - script: dotnet build '$(SRC_DIR)/source' --configuration Release --no-restore
          displayName: 'Build solution'

        - script: |
            echo "Discovering test projects in $(SRC_DIR)..."
            set -e
            TEST_PROJECTS=$(find "$(SRC_DIR)/tests" -type f -name "*Tests.csproj" -o -name "*.Tests.csproj" || true)
            if [ -z "$TEST_PROJECTS" ]; then
              echo "No test projects found."
              exit 0
            fi
            for proj in $TEST_PROJECTS; do
              echo "Running tests for $proj"
              dotnet test "$proj" --configuration Release --no-build --collect:"XPlat Code Coverage"  --logger trx
              echo "Completed tests for $proj"
            done
          displayName: 'Run all tests with coverage and logs'

- stage: CodeAnalysis
  displayName: 'SonarQube Build Scan'
  jobs:
  - job: sonarqube
    displayName: SonarQube Analysis
    continueOnError: true
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'

    - script: |
        dotnet nuget locals all --clear || true
        echo "Before scan memory:"; free -h || true
      displayName: 'Pre-clean'

    - script: |
        export SONAR_SCANNER_OPTS="-Xmx1024m -Xms256m"
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin \
          /k:"sonarqube-project" \
          /n:"My Project" \
          /v:"1.0" \
          /d:sonar.host.url= '$(sonarhosturl)' \
          /d:sonar.login= '$(sonarlogin)' \
          /d:sonar.sources="$(SRC_DIR)/source" \
          /d:sonar.sourceEncoding="UTF-8"
          /d:sonar.exclusions="**/node_modules/**,**/dist/**,**/build/**,**/.next/**,**/*.min.js,**/*.bundle.js,**/*.spec.ts,**/*.test.ts"

        dotnet build "$(SRC_DIR)/source" --no-incremental

        dotnet sonarscanner end /d:sonar.login="sqa_6c951f8cd1584175961cbc357a8011565ead668e"
      env:
        PATH: $(PATH):~/.dotnet/tools
      displayName: 'Sonar scan'

- stage: DockerBuildAndPush
  displayName: 'Docker Build and Push'
  jobs:
  - job: docker_build
    displayName: 'Build image'
    steps:
    - task: Docker@2
      displayName: 'Build image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: 'dotnet-sample-project/Dockerfile'
        tags: '$(tag)'

  - job: TrivyScan
    displayName: 'Run Trivy Vulnerability scan'
    dependsOn: docker_build
    steps:
      -  task: AzureCLI@2
         displayName: "Login & scan image"
         inputs:
          azureSubscription: '$(azureSubscription)'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
              az acr login --name $(acrName)
              docker pull $(acrName).azurecr.io/$(imageRepository):$(tag)
              trivy image $(acrName).azurecr.io/$(imageRepository):$(tag) --severity HIGH,CRITICAL

  - job: docker_push
    displayName: 'Push image'
    dependsOn: docker_build
    steps:
    - task: Docker@2
      displayName: 'Push image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

- stage: DeployDev
  dependsOn: DockerBuildAndPush
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/'))
  jobs:
    - deployment: deploy_dev
      environment: 'dev-aks'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: HelmInstaller@1
                inputs:
                  helmVersionToInstall: 'latest'
              - task: HelmDeploy@0
                displayName: Deploy to Dev
                inputs:
                  connectionType: 'Kubernetes Service Connection'
                  kubernetesServiceConnection: 'AKS-Conn'
                  command: 'upgrade'
                  install: true
                  chartType: 'FilePath'
                  chartPath: '$(helmChartPath)'
                  namespace: 'deploy-dev'
                  releaseName: 'myapp-dev'
                  arguments: >
                    --create-namespace
                    --set dotnetSampleApp.image.repository=$(imageRepositoryCD)
                    --set dotnetSampleApp.image.tag=$(tag)
                    --set image.pullSecrets[0]=kube-acr

- stage: DeployStaging
  dependsOn: DockerBuildAndPush
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
    - deployment: deploy_staging
      environment: 'staging-aks'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: HelmInstaller@1
                inputs:
                  helmVersionToInstall: 'latest'

              - task: HelmDeploy@0
                displayName: Deploy to Staging
                inputs:
                  connectionType: 'Kubernetes Service Connection'
                  kubernetesServiceConnection: 'AKS-Conn'
                  namespace: 'deploy-staging'
                  command: 'upgrade'
                  install: true
                  chartType: 'FilePath'
                  chartPath: '$(helmChartPath)'
                  releaseName: 'myapp-staging'
                  arguments: >
                    --create-namespace
                    --set dotnetSampleApp.image.repository=$(imageRepositoryCD)
                    --set dotnetSampleApp.image.tag=$(tag)
                    --set image.pullSecrets[0]=kube-acr

- stage: DeployProd
  dependsOn: DeployStaging
  condition: succeeded()
  jobs:
    - deployment: deploy_prod
      environment: 'prod-aks'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: HelmInstaller@1
                inputs:
                  helmVersionToInstall: 'latest'
              - task: HelmDeploy@0
                displayName: Deploy to Prod
                inputs:
                  connectionType: 'Kubernetes Service Connection'
                  kubernetesServiceConnection: 'AKS-Conn'
                  namespace: 'deploy-prod'
                  command: 'upgrade'
                  install: true
                  chartType: 'FilePath'
                  chartPath: '$(helmChartPath)'
                  releaseName: 'myapp-prod'
                  arguments: >
                    --create-namespace
                    --set dotnetSampleApp.image.repository=$(imageRepositoryCD)
                    --set dotnetSampleApp.image.tag=$(tag)
                    --set image.pullSecrets[0]=kube-acr

# - stage: Deployment
#   displayName: Deploy to AKS
#   jobs:
#   - job: Deploy
#     displayName: KubeDeploy
#     steps:
#     - task: KubernetesManifest@1
#       displayName: 'Create Secret'
#       inputs:
#         action: 'createSecret'
#         connectionType: 'kubernetesServiceConnection'
#         kubernetesServiceConnection: 'AKS-Conn'
#         secretType: 'dockerRegistry'
#         secretName: 'kube-acr'
#         dockerRegistryEndpoint: 'devops-service-connection'

#     - task: KubernetesManifest@1
#       inputs:
#         action: 'deploy'
#         connectionType: 'kubernetesServiceConnection'
#         kubernetesServiceConnection: 'AKS-Conn'
#         manifests: '$(build.sourcesdirectory)/dotnet-sample-project/aks-files/**'
#         imagePullSecrets: 'kube-acr'


# - stage: Deployment
#   displayName: Deploy to AKS (using Helm)
#   jobs:
#   - job: HelmDeploy
#     displayName: Helm upgrade/install
#     steps:
#     - task: HelmInstaller@1
#       displayName: Install Helm
#       inputs:
#         helmVersionToInstall: 'latest'

#     # - task: HelmDeploy@0
#     #   displayName: Helm uninstall 
#     #   inputs:
#     #     connectionType: 'Kubernetes Service Connection'
#     #     kubernetesServiceConnection: 'AKS-Conn'
#     #     command: 'uninstall'
#     #     arguments: '20250816.19'

#     - task: HelmDeploy@0
#       displayName: Helm upgrade 
#       inputs:
#         connectionType: 'Kubernetes Service Connection'
#         kubernetesServiceConnection: 'AKS-Conn'
#         command: 'upgrade'
#         install: true
#         chartType: 'FilePath'
#         chartPath: '$(helmChartPath)'
#         releaseName: 'myapp'
#         arguments: >
#           --set dotnetSampleApp.image.tag=$(tag)
#           --set image.pullSecrets[0]=kube-acr
