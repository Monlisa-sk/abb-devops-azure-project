# Test Pipeline
trigger:
  branches:
    include:
      - main
      - feature/*

pool:
  name: AzureVM

variables:
  SRC_DIR: 'dotnet-sample-project'
  dockerRegistryServiceConnection: 'devops-service-connection'
  imageRepository: 'dotnet-sample-project'
  tag: '$(Build.SourceBranchName)-$(Build.BuildId)'

stages:
# - stage: BuildAndTest
#   displayName: 'Build & Test'
#   jobs:
#     - job: build_and_test
#       displayName: 'Build and Test'
#       steps:
#         - task: UseDotNet@2
#           inputs:
#             packageType: 'sdk'
#             version: '9.0.x'

#         - script: dotnet restore '$(SRC_DIR)/source'
#           displayName: 'Restore NuGet packages'

#         - script: dotnet build '$(SRC_DIR)/source' --configuration Release --no-restore
#           displayName: 'Build solution'

#         - script: |
#             echo "Discovering test projects in $(SRC_DIR)..."
#             set -e
#             TEST_PROJECTS=$(find "$(SRC_DIR)/tests" -type f -name "*Tests.csproj" -o -name "*.Tests.csproj" || true)
#             if [ -z "$TEST_PROJECTS" ]; then
#               echo "No test projects found."
#               exit 0
#             fi
#             for proj in $TEST_PROJECTS; do
#               echo "Running tests for $proj"
#               dotnet test "$proj" --configuration Release --no-build --collect:"XPlat Code Coverage"  --logger trx
#               echo "Completed tests for $proj"
#             done
#           displayName: 'Run all tests with coverage and logs'

- stage: CodeAnalysis
  displayName: 'SonarQube Build Scan'
  jobs:
  - job: sonarqube
    displayName: SonarQube
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'
    - task: SonarQubePrepare@7
      inputs:
        SonarQube: 'sonarqube-project'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'sonarqube-project'
        cliProjectName: 'dotnet-sample-project'
        cliProjectVersion: '$(Build.BuildNumber)'
        extraProperties: |
          sonar.sources=$(SRC_DIR)/source
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/$(SRC_DIR)/**/coverage.opencover.xml
          sonar.exclusions=**/*.md

    - script: dotnet build '$(SRC_DIR)/source' -c Release --no-restore
      displayName: 'Build for analysis'

    - task: SonarQubeAnalyze@7

    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'

- stage: DockerBuild
  displayName: 'Docker Build'
  jobs:
  - job: docker_build
    displayName: 'Build image'
    steps:
    - task: Docker@2
      displayName: 'Build image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: 'dotnet-sample-project/Dockerfile'
        tags: '$(tag)'

- stage: Push
  displayName: 'Push image to ACR'
  jobs:
  - job: docker_push
    displayName: 'Push image'
    steps:
    - task: Docker@2
      displayName: 'Push image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'